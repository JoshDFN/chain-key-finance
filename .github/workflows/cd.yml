name: Deploy to IC

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'testnet'
        type: choice
        options:
          - testnet
          - mainnet

jobs:
  deploy-ic:
    name: 'Deploy to Internet Computer'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
      
      - name: Install dfx
        uses: dfinity/setup-dfx@main
      
      - name: Start local replica for build
        run: |
          dfx start --background
          mkdir -p .dfx/local
          echo '{}' > .dfx/local/canister_ids.json
          dfx canister create --all
          
          # Create the assetstorage.did file for the frontend canister
          mkdir -p .dfx/local/canisters/frontend
          echo '
          type AssetCanisterArgs = record {
            name : text;
            description : text;
            init_args : AssetCanisterInit;
          };
          type AssetCanisterInit = record {
            storage_space : opt nat;
          };
          service : (AssetCanisterArgs) -> {
            get : (record {
              key : text;
              accept_encodings : vec text;
            }) -> (record {
              content : blob;
              sha256 : opt blob;
              content_type : text;
              content_encoding : text;
              total_length : nat;
            }) query;
            list : (record {}) -> (vec record {
              key : text;
              content_type : text;
              encodings : vec record {
                content_encoding : text;
                sha256 : opt blob;
                length : nat;
              };
            }) query;
            create_batch : (record {}) -> (record { batch_id : nat });
            create_chunk : (record { batch_id : nat; content : blob }) -> (record { chunk_id : nat });
            commit_batch : (record {
              batch_id : nat;
              operations : vec record {
                operation_type : variant {
                  CreateAsset : record {
                    key : text;
                    content_type : text;
                  };
                  SetAssetContent : record {
                    key : text;
                    sha256 : opt blob;
                    chunk_ids : vec nat;
                    content_encoding : text;
                  };
                  DeleteAsset : record { key : text };
                  Clear : record {};
                };
              };
            }) -> ();
            create_asset : (record {
              key : text;
              content_type : text;
              content_encoding : text;
              content : blob;
              sha256 : opt blob;
            }) -> ();
            set_asset_content : (record {
              key : text;
              content_encoding : text;
              chunk_ids : vec nat;
              sha256 : opt blob;
            }) -> ();
            get_asset_properties : (record { key : text; }) -> (record {
              content_type : text;
              encodings : vec record {
                content_encoding : text;
                sha256 : opt blob;
                length : nat;
              };
            }) query;
            clear : (record {}) -> ();
            delete_asset : (record { key : text }) -> ();
            store : (record {
              key : text;
              content_type : text;
              content_encoding : text;
              content : blob;
              sha256 : opt blob;
            }) -> ();
            http_request : (record {
              method : text;
              url : text;
              headers : vec record { name : text; value : text };
              body : blob;
            }) -> (record {
              status_code : nat16;
              headers : vec record { name : text; value : text };
              body : blob;
              streaming_strategy : opt variant {
                Callback : record {
                  callback : func (record { key : text; content_encoding : text; index : nat; sha256 : opt blob }) -> (record { body : blob; token : opt record { key : text; content_encoding : text; index : nat; sha256 : opt blob } }) query;
                  token : record { key : text; content_encoding : text; index : nat; sha256 : opt blob };
                };
              };
            }) query;
          }' > .dfx/local/canisters/frontend/assetstorage.did
          
          dfx generate
      
      - name: Build frontend
        run: |
          export NODE_OPTIONS="--no-experimental-fetch --experimental-global-webcrypto"
          npm run build
      
      # DFX_IDENTITY has been generated by executing:
      # `dfx identity export github-actions | base64`
      - name: Setup DFX identity
        run: |
          mkdir -p ~/.config/dfx/identity/default
          echo $DFX_IDENTITY | base64 -d > ~/.config/dfx/identity/default/identity.pem
          chmod 600 ~/.config/dfx/identity/default/identity.pem
          dfx identity use default
          dfx identity get-principal
        env:
          DFX_IDENTITY: ${{ secrets.DFX_IDENTITY }}
      
      - name: Deploy to testnet
        if: ${{ github.event.inputs.environment == 'testnet' || (github.event_name == 'push' && github.ref != 'refs/heads/main') }}
        run: |
          export NODE_OPTIONS="--no-experimental-fetch --experimental-global-webcrypto"
          dfx deploy --network=testnet --no-wallet
      
      - name: Deploy to mainnet
        if: ${{ github.event.inputs.environment == 'mainnet' || (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
        run: |
          export NODE_OPTIONS="--no-experimental-fetch --experimental-global-webcrypto"
          # Create production canister IDs if they don't exist
          dfx canister --network ic create --all
          
          # Build the canisters
          dfx build --network ic
          
          # Deploy the canisters
          dfx canister --network ic install --all --mode upgrade
          
          # Set up inter-canister calls
          ISO_DAPP_ID=$(dfx canister --network ic id iso_dapp)
          
          # Set the ISO Dapp as the minter for token canisters
          dfx canister --network ic call ckBTC setMinter "(principal \"$ISO_DAPP_ID\")"
          dfx canister --network ic call ckETH setMinter "(principal \"$ISO_DAPP_ID\")"
          dfx canister --network ic call ckUSDC setMinter "(principal \"$ISO_DAPP_ID\")"
          
          # Initialize the DEX
          dfx canister --network ic call dex initialize
          
          # Output frontend URL
          FRONTEND_ID=$(dfx canister --network ic id frontend)
          echo "Frontend deployed at: https://$FRONTEND_ID.ic0.app"
